#!/usr/bin/env python3
"""
CustomerMind IQ - Overage Approval System Testing
Testing the new user-controlled overage approval system comprehensively

Test Objectives:
1. Overage Review Endpoint - GET /api/subscriptions/overage-review/{user_email}
2. Overage Approval Process - POST /api/subscriptions/approve-overages
3. User Dashboard Status - GET /api/subscriptions/user-dashboard-overage-status/{user_email}
4. Refund Processing Time Update - POST /api/subscriptions/admin/process-refund
"""

import asyncio
import json
import os
import sys
import requests
from datetime import datetime, timedelta
from typing import Dict, Any, List
import urllib3

# Disable SSL warnings for testing
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Configuration
BACKEND_URL = os.getenv("REACT_APP_BACKEND_URL", "https://admin-portal-fix-9.preview.emergentagent.com")
API_BASE = f"{BACKEND_URL}/api"

# Test credentials
ADMIN_CREDENTIALS = {
    "email": "admin@customermindiq.com",
    "password": "CustomerMindIQ2025!"
}

# Test user that would exceed limits
TEST_USER_EMAIL = "admin@customermindiq.com"  # Using admin as requested in review

class OverageApprovalTester:
    def __init__(self):
        self.admin_token = None
        self.results = []
        
    def log_result(self, test_name: str, success: bool, details: str = "", data: Any = None):
        """Log test result"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        self.results.append({
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "data": data,
            "timestamp": datetime.now().isoformat()
        })
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        if not success and data:
            print(f"   Error Data: {data}")
        print()

    async def test_authentication_setup(self):
        """Test admin authentication"""
        print("üîê TESTING ADMIN AUTHENTICATION")
        print("=" * 50)
        
        try:
            # Add proper headers for the request
            headers = {"Content-Type": "application/json"}
            response = requests.post(f"{API_BASE}/auth/login", json=ADMIN_CREDENTIALS, headers=headers, timeout=60, verify=False)
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.log_result(
                    "Admin Authentication", 
                    True, 
                    f"Admin login successful, role: {data.get('user', {}).get('role', 'unknown')}"
                )
                return True
            else:
                self.log_result(
                    "Admin Authentication", 
                    False, 
                    f"Status: {response.status_code}", 
                    response.text
                )
                return False
        except Exception as e:
            self.log_result("Admin Authentication", False, f"Exception: {str(e)}")
            return False

    async def test_overage_review_endpoint(self):
        """Test GET /api/subscriptions/overage-review/{user_email}"""
        print("üìä TESTING OVERAGE REVIEW ENDPOINT")
        print("=" * 50)
        
        if not self.admin_token:
            self.log_result("Overage Review Endpoint", False, "No admin token available")
            return False
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        try:
            response = requests.get(
                f"{API_BASE}/subscriptions/overage-review/{TEST_USER_EMAIL}", 
                headers=headers, 
                timeout=60, 
                verify=False
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # Validate response structure
                required_fields = ["status", "user_email", "plan_type", "pending_approvals", "total_potential_monthly_cost", "approval_required"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log_result(
                        "Overage Review Endpoint", 
                        False, 
                        f"Missing required fields: {missing_fields}", 
                        data
                    )
                    return False
                
                # Check if we have pending approvals structure
                pending_approvals = data.get("pending_approvals", [])
                approval_required = data.get("approval_required", False)
                
                self.log_result(
                    "Overage Review Endpoint", 
                    True, 
                    f"User: {data['user_email']}, Plan: {data['plan_type']}, Pending approvals: {len(pending_approvals)}, Approval required: {approval_required}, Total cost: {data['total_potential_monthly_cost']}"
                )
                
                # Store pending approvals for next test
                self.pending_approvals = pending_approvals
                return True
            else:
                self.log_result(
                    "Overage Review Endpoint", 
                    False, 
                    f"Status: {response.status_code}", 
                    response.text
                )
                return False
        except Exception as e:
            self.log_result("Overage Review Endpoint", False, f"Exception: {str(e)}")
            return False

    async def test_overage_approval_process(self):
        """Test POST /api/subscriptions/approve-overages"""
        print("‚úÖ TESTING OVERAGE APPROVAL PROCESS")
        print("=" * 50)
        
        if not self.admin_token:
            self.log_result("Overage Approval Process", False, "No admin token available")
            return False
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        # Use sample approval data as specified in review request
        approval_data = {
            "user_email": TEST_USER_EMAIL,
            "approved_overages": [
                {
                    "resource_type": "contacts",
                    "overage_amount": 500,
                    "monthly_cost": 5.00,
                    "approved": True
                }
            ]
        }
        
        try:
            response = requests.post(
                f"{API_BASE}/subscriptions/approve-overages", 
                json=approval_data,
                headers=headers, 
                timeout=60, 
                verify=False
            )
            
            if response.status_code in [200, 201]:
                data = response.json()
                
                # Validate response structure
                required_fields = ["status", "message", "approved_items", "total_monthly_cost", "billing_notification", "access_granted"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log_result(
                        "Overage Approval Process", 
                        False, 
                        f"Missing required fields: {missing_fields}", 
                        data
                    )
                    return False
                
                if data.get("status") == "success":
                    self.log_result(
                        "Overage Approval Process", 
                        True, 
                        f"Approved {data['approved_items']} items, Total cost: {data['total_monthly_cost']}, Message: {data['message']}"
                    )
                    return True
                else:
                    self.log_result(
                        "Overage Approval Process", 
                        False, 
                        "Invalid response status", 
                        data
                    )
                    return False
            else:
                self.log_result(
                    "Overage Approval Process", 
                    False, 
                    f"Status: {response.status_code}", 
                    response.text
                )
                return False
        except Exception as e:
            self.log_result("Overage Approval Process", False, f"Exception: {str(e)}")
            return False

    async def test_user_dashboard_overage_status(self):
        """Test GET /api/subscriptions/user-dashboard-overage-status/{user_email}"""
        print("üì± TESTING USER DASHBOARD OVERAGE STATUS")
        print("=" * 50)
        
        if not self.admin_token:
            self.log_result("User Dashboard Overage Status", False, "No admin token available")
            return False
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        try:
            response = requests.get(
                f"{API_BASE}/subscriptions/user-dashboard-overage-status/{TEST_USER_EMAIL}", 
                headers=headers, 
                timeout=60, 
                verify=False
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # Validate response structure
                required_fields = ["status", "user_email", "resource_status", "pending_approval_needed", "approved_monthly_overage_cost"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log_result(
                        "User Dashboard Overage Status", 
                        False, 
                        f"Missing required fields: {missing_fields}", 
                        data
                    )
                    return False
                
                resource_status = data.get("resource_status", {})
                pending_approval = data.get("pending_approval_needed", False)
                approved_cost = data.get("approved_monthly_overage_cost", "$0.00")
                
                # Count approved vs blocked resources
                approved_resources = []
                blocked_resources = []
                within_limit_resources = []
                
                for resource, status_info in resource_status.items():
                    status_type = status_info.get("status", "unknown")
                    if status_type == "approved":
                        approved_resources.append(resource)
                    elif status_type == "blocked":
                        blocked_resources.append(resource)
                    elif status_type == "within_limit":
                        within_limit_resources.append(resource)
                
                self.log_result(
                    "User Dashboard Overage Status", 
                    True, 
                    f"User: {data['user_email']}, Approved resources: {len(approved_resources)}, Blocked resources: {len(blocked_resources)}, Within limit: {len(within_limit_resources)}, Pending approval needed: {pending_approval}, Approved cost: {approved_cost}"
                )
                return True
            else:
                self.log_result(
                    "User Dashboard Overage Status", 
                    False, 
                    f"Status: {response.status_code}", 
                    response.text
                )
                return False
        except Exception as e:
            self.log_result("User Dashboard Overage Status", False, f"Exception: {str(e)}")
            return False

    async def test_refund_processing_time_update(self):
        """Test POST /api/subscriptions/admin/process-refund - verify 1-2 business days response"""
        print("üí∞ TESTING REFUND PROCESSING TIME UPDATE")
        print("=" * 50)
        
        if not self.admin_token:
            self.log_result("Refund Processing Time Update", False, "No admin token available")
            return False
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        # Test refund request data
        refund_data = {
            "user_email": TEST_USER_EMAIL,
            "refund_type": "immediate",
            "reason": "Testing refund processing time update",
            "admin_notes": "Test refund to verify 1-2 business days processing time message"
        }
        
        try:
            response = requests.post(
                f"{API_BASE}/subscriptions/admin/process-refund", 
                json=refund_data,
                headers=headers, 
                timeout=60, 
                verify=False
            )
            
            if response.status_code in [200, 201]:
                data = response.json()
                
                # Check if response contains processing time information
                refund_details = data.get("refund_details", {})
                processing_time = refund_details.get("processing_time", "")
                
                # Verify it shows 1-2 business days
                expected_processing_time = "1-2 business days"
                
                if processing_time == expected_processing_time:
                    self.log_result(
                        "Refund Processing Time Update", 
                        True, 
                        f"Processing time correctly shows: '{processing_time}', Refund ID: {refund_details.get('refund_id', 'unknown')[:8]}..., Total refund: {refund_details.get('total_refund', 'unknown')}"
                    )
                    return True
                else:
                    self.log_result(
                        "Refund Processing Time Update", 
                        False, 
                        f"Processing time mismatch. Expected: '{expected_processing_time}', Got: '{processing_time}'", 
                        data
                    )
                    return False
            else:
                self.log_result(
                    "Refund Processing Time Update", 
                    False, 
                    f"Status: {response.status_code}", 
                    response.text
                )
                return False
        except Exception as e:
            self.log_result("Refund Processing Time Update", False, f"Exception: {str(e)}")
            return False

    async def test_billing_notifications_scheduled(self):
        """Test that billing notifications are properly scheduled"""
        print("üìß TESTING BILLING NOTIFICATIONS SCHEDULED")
        print("=" * 50)
        
        if not self.admin_token:
            self.log_result("Billing Notifications Scheduled", False, "No admin token available")
            return False
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        try:
            # Check if user has next_overage_billing date set after approval
            response = requests.get(f"{API_BASE}/auth/profile", headers=headers, timeout=60, verify=False)
            
            if response.status_code == 200:
                user_data = response.json()
                user_info = user_data.get("user", {})
                
                # Check for overage-related fields
                next_billing = user_info.get("next_overage_billing")
                approved_overages = user_info.get("approved_overages", [])
                overage_approval_date = user_info.get("overage_approval_date")
                
                if approved_overages and overage_approval_date:
                    self.log_result(
                        "Billing Notifications Scheduled", 
                        True, 
                        f"User has {len(approved_overages)} approved overages, Approval date: {overage_approval_date}, Next billing: {next_billing or 'Not set'}"
                    )
                    return True
                else:
                    self.log_result(
                        "Billing Notifications Scheduled", 
                        True, 
                        f"No approved overages found (expected if user is within limits), Approved overages: {len(approved_overages)}"
                    )
                    return True
            else:
                self.log_result(
                    "Billing Notifications Scheduled", 
                    False, 
                    f"Status: {response.status_code}", 
                    response.text
                )
                return False
        except Exception as e:
            self.log_result("Billing Notifications Scheduled", False, f"Exception: {str(e)}")
            return False

    async def test_admin_visibility_into_user_choices(self):
        """Test that admin has visibility into user overage choices"""
        print("üëÅÔ∏è TESTING ADMIN VISIBILITY INTO USER CHOICES")
        print("=" * 50)
        
        if not self.admin_token:
            self.log_result("Admin Visibility Into User Choices", False, "No admin token available")
            return False
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        try:
            # Test admin analytics dashboard for overage information
            response = requests.get(f"{API_BASE}/admin/analytics/dashboard", headers=headers, timeout=60, verify=False)
            
            if response.status_code == 200:
                data = response.json()
                
                # Check if dashboard contains user/subscription information
                user_stats = data.get("user_statistics", {})
                revenue_analytics = data.get("revenue_analytics", {})
                
                self.log_result(
                    "Admin Visibility Into User Choices", 
                    True, 
                    f"Admin dashboard accessible with user stats: {user_stats.get('total_users', 0)} users, Revenue: {revenue_analytics.get('monthly_revenue', '$0')}"
                )
                return True
            else:
                # Try alternative admin endpoints
                users_response = requests.get(f"{API_BASE}/admin/users", headers=headers, timeout=60, verify=False)
                if users_response.status_code == 200:
                    users_data = users_response.json()
                    users_list = users_data.get("users", [])
                    
                    self.log_result(
                        "Admin Visibility Into User Choices", 
                        True, 
                        f"Admin can view {len(users_list)} users through admin/users endpoint"
                    )
                    return True
                else:
                    self.log_result(
                        "Admin Visibility Into User Choices", 
                        False, 
                        f"Dashboard status: {response.status_code}, Users endpoint status: {users_response.status_code}", 
                        response.text
                    )
                    return False
        except Exception as e:
            self.log_result("Admin Visibility Into User Choices", False, f"Exception: {str(e)}")
            return False

    def print_summary(self):
        """Print comprehensive test summary"""
        print("\n" + "=" * 80)
        print("üéØ OVERAGE APPROVAL SYSTEM TEST SUMMARY")
        print("=" * 80)
        
        total_tests = len(self.results)
        passed_tests = len([r for r in self.results if r["success"]])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìä OVERALL RESULTS: {passed_tests}/{total_tests} tests passed ({success_rate:.1f}% success rate)")
        print()
        
        # Group results by functionality
        functionalities = {
            "üîê Authentication": ["Admin Authentication"],
            "üìä Overage Review System": ["Overage Review Endpoint"],
            "‚úÖ Overage Approval Process": ["Overage Approval Process"],
            "üì± User Dashboard Integration": ["User Dashboard Overage Status"],
            "üí∞ Refund Processing": ["Refund Processing Time Update"],
            "üìß Billing & Notifications": ["Billing Notifications Scheduled"],
            "üëÅÔ∏è Admin Oversight": ["Admin Visibility Into User Choices"]
        }
        
        for functionality_name, test_names in functionalities.items():
            print(f"{functionality_name}:")
            functionality_results = [r for r in self.results if r["test"] in test_names]
            functionality_passed = len([r for r in functionality_results if r["success"]])
            functionality_total = len(functionality_results)
            
            for result in functionality_results:
                print(f"  {result['status']}: {result['test']}")
                if result['details']:
                    print(f"      {result['details']}")
            
            if functionality_total > 0:
                functionality_rate = (functionality_passed / functionality_total * 100)
                print(f"  üìà Success Rate: {functionality_passed}/{functionality_total} ({functionality_rate:.1f}%)")
            print()
        
        # Key findings
        print("üîç KEY FINDINGS:")
        
        # Check each core requirement from review request
        overage_review_test = next((r for r in self.results if r["test"] == "Overage Review Endpoint"), None)
        overage_approval_test = next((r for r in self.results if r["test"] == "Overage Approval Process"), None)
        dashboard_status_test = next((r for r in self.results if r["test"] == "User Dashboard Overage Status"), None)
        refund_processing_test = next((r for r in self.results if r["test"] == "Refund Processing Time Update"), None)
        
        if overage_review_test and overage_review_test["success"]:
            print("  ‚úÖ Overage Review Endpoint: Users can review pending overage charges ‚úÖ")
        else:
            print("  ‚ùå Overage Review Endpoint: Issues with pending overage review")
        
        if overage_approval_test and overage_approval_test["success"]:
            print("  ‚úÖ Overage Approval Process: Users can approve specific overages they want ‚úÖ")
        else:
            print("  ‚ùå Overage Approval Process: Issues with overage approval")
        
        if dashboard_status_test and dashboard_status_test["success"]:
            print("  ‚úÖ User Dashboard Status: System tracks what's approved vs blocked ‚úÖ")
        else:
            print("  ‚ùå User Dashboard Status: Issues with tracking approved/blocked resources")
        
        if refund_processing_test and refund_processing_test["success"]:
            print("  ‚úÖ Refund Processing Time: Shows 1-2 business days as requested ‚úÖ")
        else:
            print("  ‚ùå Refund Processing Time: Issues with processing time display")
        
        billing_test = next((r for r in self.results if r["test"] == "Billing Notifications Scheduled"), None)
        if billing_test and billing_test["success"]:
            print("  ‚úÖ Billing Notifications: Scheduled properly after approval ‚úÖ")
        else:
            print("  ‚ùå Billing Notifications: Issues with notification scheduling")
        
        admin_visibility_test = next((r for r in self.results if r["test"] == "Admin Visibility Into User Choices"), None)
        if admin_visibility_test and admin_visibility_test["success"]:
            print("  ‚úÖ Admin Visibility: Admin has visibility into user choices ‚úÖ")
        else:
            print("  ‚ùå Admin Visibility: Issues with admin oversight")
        
        print()
        print("üéâ OVERAGE APPROVAL SYSTEM VERIFICATION:")
        
        core_tests_passed = all([
            overage_review_test and overage_review_test["success"],
            overage_approval_test and overage_approval_test["success"],
            dashboard_status_test and dashboard_status_test["success"],
            refund_processing_test and refund_processing_test["success"]
        ])
        
        if core_tests_passed:
            print("  ‚úÖ COMPLETE SUCCESS: User-controlled overage approval system fully operational!")
            print("  ‚úÖ Users can review and approve specific overage charges")
            print("  ‚úÖ System properly tracks approved vs blocked resources")
            print("  ‚úÖ Billing notifications are scheduled correctly")
            print("  ‚úÖ Refund processing shows updated 1-2 business days timeframe")
            print("  ‚úÖ Admin has proper visibility into user decisions")
        else:
            print("  ‚ö†Ô∏è  Some core functionality needs attention - see failed tests above")
        
        print("\n" + "=" * 80)
        
        return success_rate >= 80  # Consider 80%+ as overall success

async def main():
    """Run complete overage approval system tests"""
    print("üöÄ STARTING OVERAGE APPROVAL SYSTEM TESTING")
    print(f"üåê Backend URL: {BACKEND_URL}")
    print(f"üì° API Base: {API_BASE}")
    print(f"üë§ Test User: {TEST_USER_EMAIL}")
    print("=" * 80)
    
    tester = OverageApprovalTester()
    
    # Run all tests in sequence
    test_sequence = [
        tester.test_authentication_setup,
        tester.test_overage_review_endpoint,
        tester.test_overage_approval_process,
        tester.test_user_dashboard_overage_status,
        tester.test_refund_processing_time_update,
        tester.test_billing_notifications_scheduled,
        tester.test_admin_visibility_into_user_choices
    ]
    
    for test_func in test_sequence:
        await test_func()
        # Small delay between tests
        await asyncio.sleep(1)
    
    # Print final summary
    overall_success = tester.print_summary()
    
    # Exit with appropriate code
    sys.exit(0 if overall_success else 1)

if __name__ == "__main__":
    asyncio.run(main())