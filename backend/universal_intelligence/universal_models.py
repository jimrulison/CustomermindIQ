"""
Customer Mind IQ - Universal Intelligence Models
Platform-agnostic data models for customer intelligence
"""

from typing import List, Dict, Any, Optional
from datetime import datetime
from pydantic import BaseModel
from enum import Enum

class ChurnRisk(str, Enum):
    LOW = "low"
    MEDIUM = "medium" 
    HIGH = "high"
    CRITICAL = "critical"

class CustomerValue(str, Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VIP = "vip"

class PurchaseIntent(str, Enum):
    COLD = "cold"
    WARM = "warm"
    HOT = "hot"
    READY = "ready"

class UniversalCustomerProfile(BaseModel):
    """Unified customer profile aggregated from all platforms"""
    customer_id: str  # Universal customer ID
    email: str
    name: Optional[str] = None
    
    # Aggregated data from all platforms
    total_spent_all_platforms: float = 0.0
    total_orders_all_platforms: int = 0
    platforms_active: List[str] = []  # List of platform names
    first_seen_date: Optional[datetime] = None
    last_activity_date: Optional[datetime] = None
    
    # AI-powered insights
    customer_value_tier: CustomerValue = CustomerValue.MEDIUM
    churn_risk_level: ChurnRisk = ChurnRisk.MEDIUM
    purchase_intent: PurchaseIntent = PurchaseIntent.WARM
    
    # Behavioral analysis
    purchase_frequency_score: int = 50  # 0-100
    engagement_score: int = 50  # 0-100
    loyalty_score: int = 50  # 0-100
    
    # Platform-specific data
    platform_data: Dict[str, Dict[str, Any]] = {}
    
    # AI analysis results
    behavioral_patterns: List[str] = []
    predicted_actions: List[str] = []
    recommended_strategies: List[str] = []
    
    # Metadata
    created_at: datetime = datetime.now()
    last_updated: datetime = datetime.now()

class CustomerInsight(BaseModel):
    """Individual customer insight generated by AI"""
    insight_id: str
    customer_id: str
    insight_type: str  # behavioral, predictive, prescriptive
    title: str
    description: str
    confidence_score: float  # 0-1
    actionable: bool = True
    priority: str = "medium"  # low, medium, high, urgent
    recommended_actions: List[str] = []
    expected_impact: Optional[str] = None
    created_at: datetime = datetime.now()

class BusinessIntelligence(BaseModel):
    """High-level business insights across all customers"""
    analysis_id: str
    business_name: str
    platforms_analyzed: List[str]
    total_customers: int
    analysis_period_days: int
    
    # Customer segmentation
    customer_segments: Dict[str, int]  # segment_name -> count
    value_distribution: Dict[CustomerValue, int]
    churn_risk_distribution: Dict[ChurnRisk, int]
    
    # Revenue insights
    total_revenue: float
    average_order_value: float
    revenue_by_platform: Dict[str, float]
    revenue_trend: str  # increasing, stable, declining
    
    # Behavioral insights
    top_customer_behaviors: List[str]
    common_purchase_patterns: List[str]
    seasonal_trends: List[str]
    
    # Predictions
    churn_predictions: List[str]
    growth_opportunities: List[str]
    recommended_actions: List[str]
    
    # Performance metrics
    customer_lifetime_value: float
    retention_rate: float
    acquisition_cost_estimate: float
    
    created_at: datetime = datetime.now()

class PlatformInsight(BaseModel):
    """Insights specific to a platform/software"""
    platform_name: str
    customers_count: int
    revenue_contribution: float
    top_products: List[str]
    platform_specific_patterns: List[str]
    integration_health: str  # healthy, issues, disconnected
    data_quality_score: int  # 0-100
    last_sync: Optional[datetime] = None

class ActionRecommendation(BaseModel):
    """AI-powered action recommendation"""
    action_id: str
    customer_id: Optional[str] = None  # None for business-wide actions
    action_type: str  # email, discount, outreach, upgrade, retention
    priority: str = "medium"
    title: str
    description: str
    expected_outcome: str
    success_probability: float  # 0-1
    estimated_revenue_impact: float
    trigger_conditions: List[str] = []
    target_platform: Optional[str] = None
    created_at: datetime = datetime.now()

class CustomerJourneyStage(BaseModel):
    """Customer's current stage in their journey"""
    stage_name: str  # awareness, consideration, purchase, retention, advocacy
    stage_order: int
    entry_date: datetime
    expected_duration_days: Optional[int] = None
    conversion_probability: float = 0.5
    next_best_actions: List[str] = []

class UniversalAnalytics(BaseModel):
    """Universal analytics that work across all platforms"""
    analytics_id: str
    customer_count: int
    revenue_metrics: Dict[str, float]
    behavioral_metrics: Dict[str, float]
    engagement_metrics: Dict[str, float]
    conversion_metrics: Dict[str, float]
    
    # Cross-platform insights
    platform_performance: Dict[str, PlatformInsight]
    customer_overlap: Dict[str, int]  # customers using multiple platforms
    cross_sell_opportunities: List[str]
    
    # Trends and patterns
    growth_trends: Dict[str, str]
    seasonal_patterns: Dict[str, List[str]]
    behavior_clusters: Dict[str, List[str]]
    
    generated_at: datetime = datetime.now()

class UniversalReporting(BaseModel):
    """Universal reporting structure for any business"""
    report_id: str
    report_name: str
    report_type: str  # daily, weekly, monthly, custom
    date_range: Dict[str, datetime]
    
    # Executive summary
    key_metrics: Dict[str, Any]
    top_insights: List[str]
    urgent_actions: List[ActionRecommendation]
    
    # Detailed analysis
    customer_analysis: BusinessIntelligence
    platform_analysis: List[PlatformInsight]
    predictive_analysis: Dict[str, Any]
    
    # Visualizations data
    charts_data: Dict[str, Any] = {}
    
    created_at: datetime = datetime.now()